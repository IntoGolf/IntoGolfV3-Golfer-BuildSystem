name: Client-Specific Build

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name'
        required: true
        type: choice
        options:
          - delfland
          - noordwijkse  
          - goese
          - maasduinen
          - winterswijk
          - sallandsche
          - scherpenberg
          - amelisweerd
          - hildenberg
          - demo
          # Add more clients as needed
      platform:
        description: 'Platform to build'
        required: true
        type: choice
        options:
          - android
          - ios
          - both
        default: android
      increment_build:
        description: 'Increment build number'
        required: false
        default: true
        type: boolean
      upload_to_stores:
        description: 'Upload to app stores'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            build_android: true
            build_ios: false
          - platform: ios  
            os: macos-latest
            build_android: false
            build_ios: true
          - platform: both
            os: macos-latest
            build_android: true
            build_ios: true
    
    # Only run matrix job if platform matches input or input is 'both'
    if: ${{ inputs.platform == matrix.platform || (inputs.platform == 'both' && matrix.platform == 'both') || (inputs.platform != 'both' && matrix.platform == inputs.platform) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java (Android)
      if: ${{ matrix.build_android }}
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      if: ${{ matrix.build_android }}
      uses: android-actions/setup-android@v3
      with:
        api-level: 35
        build-tools: 35.0.0
        
    - name: Setup Xcode (iOS)
      if: ${{ matrix.build_ios }}
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @quasar/cli
      
    - name: Validate client environment
      run: |
        CLIENT="${{ inputs.client }}"
        
        # Check if environment file exists
        if [ ! -f "env/.env.$CLIENT" ]; then
          echo "❌ Environment file not found: env/.env.$CLIENT"
          echo "Available clients:"
          ls env/.env.* | sed 's/env\/.env./  - /'
          exit 1
        fi
        
        # Load and validate environment
        source env/.env.$CLIENT
        
        # Check required variables
        REQUIRED_VARS=("APP_ID" "APP_DISPLAY_NAME" "VUE_APP_BASE_URL")
        for var in "${REQUIRED_VARS[@]}"; do
          if [ -z "${!var:-}" ]; then
            echo "❌ Required environment variable $var is not set in env/.env.$CLIENT"
            exit 1
          fi
        done
        
        echo "✅ Environment validation passed for $CLIENT"
        echo "  - App ID: $APP_ID"
        echo "  - Display Name: $APP_DISPLAY_NAME"
        echo "  - Base URL: $VUE_APP_BASE_URL"
        
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets (Android)
      if: ${{ matrix.build_android }}
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        # Create secrets file for client
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        # Setup Google Services JSON if available
        if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
          mkdir -p res/${{ inputs.client }}
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > res/${{ inputs.client }}/google-services.json 2>/dev/null && echo "✅ Google Services JSON configured" || echo "⚠️ Google Services JSON decode failed"
        fi
        
    - name: Setup iOS certificates
      if: ${{ matrix.build_ios }}
      env:
        IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        if [ ! -z "$IOS_CERTIFICATE" ] && [ ! -z "$IOS_PROVISIONING_PROFILE" ]; then
          # Setup iOS certificates and provisioning profiles
          echo "✅ iOS certificates available"
          mkdir -p .secrets/ios
          echo "$IOS_CERTIFICATE" | base64 --decode > .secrets/ios/certificate.p12
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > .secrets/ios/profile.mobileprovision
        else
          echo "⚠️ iOS certificates not configured"
        fi
        
    - name: Build app
      env:
        ENVIRONMENT: ${{ inputs.client }}
        BUILD_ANDROID: ${{ matrix.build_android }}
        BUILD_IOS: ${{ matrix.build_ios }}
      run: |
        # Set build options
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        # Run build script
        ./build-client-v2.sh ${{ inputs.client }} $BUILD_OPTIONS
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.client }}-${{ matrix.platform }}-build
        path: |
          res/${{ inputs.client }}/*.apk
          res/${{ inputs.client }}/*.aab
          res/${{ inputs.client }}/*.ipa
          ios/App/build/
          android/app/build/outputs/
        retention-days: 30
        
    - name: Upload to stores
      if: ${{ inputs.upload_to_stores }}
      run: |
        CLIENT="${{ inputs.client }}"
        
        if [ "${{ matrix.build_android }}" = "true" ] && [ -f "res/$CLIENT/$CLIENT-release.aab" ]; then
          echo "📤 Android AAB ready for Google Play Console upload"
          echo "   File: res/$CLIENT/$CLIENT-release.aab"
        fi
        
        if [ "${{ matrix.build_ios }}" = "true" ] && [ -f "res/$CLIENT/$CLIENT.ipa" ]; then
          echo "📤 iOS IPA ready for App Store Connect upload"  
          echo "   File: res/$CLIENT/$CLIENT.ipa"
        fi
        
        echo "ℹ️ Manual upload to stores required"
        
    - name: Create detailed release notes
      run: |
        CLIENT="${{ inputs.client }}"
        source env/.env.$CLIENT
        
        cat > release-notes-detailed.md << EOF
        # ${{ inputs.client }} - ${{ matrix.platform }} Build
        
        ## Client Information
        - **Client Name:** $CLIENT
        - **App Display Name:** \${APP_DISPLAY_NAME:-Unknown}
        - **Package ID:** \${APP_ID:-Unknown}
        - **Version:** \${APP_VERSION:-Unknown}
        - **Build Number:** \${APP_BUILD_NUMBER:-Unknown}
        - **Base URL:** \${VUE_APP_BASE_URL:-Unknown}
        
        ## Build Configuration
        - **Platform:** ${{ matrix.platform }}
        - **Build Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **Build Incremented:** ${{ inputs.increment_build }}
        - **Upload to Stores:** ${{ inputs.upload_to_stores }}
        - **Android Target SDK:** \${ANDROID_TARGET_SDK:-Unknown}
        - **iOS Deployment Target:** \${IOS_DEPLOYMENT_TARGET:-Unknown}
        
        ## Generated Files
        EOF
        
        # List generated files
        if [ "${{ matrix.build_android }}" = "true" ]; then
          echo "### Android" >> release-notes-detailed.md
          if [ -f "res/$CLIENT/$CLIENT-release.apk" ]; then
            echo "- ✅ APK: \`res/$CLIENT/$CLIENT-release.apk\`" >> release-notes-detailed.md
          fi
          if [ -f "res/$CLIENT/$CLIENT-release.aab" ]; then
            echo "- ✅ AAB: \`res/$CLIENT/$CLIENT-release.aab\`" >> release-notes-detailed.md
          fi
        fi
        
        if [ "${{ matrix.build_ios }}" = "true" ]; then
          echo "### iOS" >> release-notes-detailed.md
          if [ -f "res/$CLIENT/$CLIENT.ipa" ]; then
            echo "- ✅ IPA: \`res/$CLIENT/$CLIENT.ipa\`" >> release-notes-detailed.md
          fi
        fi
        
        echo "" >> release-notes-detailed.md
        echo "## Installation Instructions" >> release-notes-detailed.md
        
        if [ "${{ matrix.build_android }}" = "true" ]; then
          cat >> release-notes-detailed.md << EOF
        ### Android APK Installation
        \`\`\`bash
        # Install on device/emulator
        adb install res/$CLIENT/$CLIENT-release.apk
        
        # Or install with replacement
        adb install -r res/$CLIENT/$CLIENT-release.apk
        \`\`\`
        
        EOF
        fi
        
        if [ "${{ matrix.build_ios }}" = "true" ]; then
          cat >> release-notes-detailed.md << EOF
        ### iOS IPA Installation
        - Upload to App Store Connect for TestFlight/App Store distribution
        - Or install via Xcode for development testing
        
        EOF
        fi
        
        echo "📋 Detailed release notes created"
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ inputs.client }}-${{ matrix.platform }}
        path: release-notes-detailed.md
        retention-days: 30
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        find res/ -name "google-services.json" -delete 2>/dev/null || true
        find . -name "*.mobileprovision" -delete 2>/dev/null || true
        find . -name "*.p12" -delete 2>/dev/null || true