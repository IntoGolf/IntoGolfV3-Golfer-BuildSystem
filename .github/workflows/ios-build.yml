name: Build iOS App

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., goese)'
        required: true
        type: string
      increment_build:
        description: 'Increment build number'
        required: false
        default: true
        type: boolean
      upload_to_testflight:
        description: 'Upload to TestFlight'
        required: false
        default: false
        type: boolean

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @quasar/cli
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install CocoaPods
      run: sudo gem install cocoapods
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
        APPLE_API_PRIVATE_KEY: ${{ secrets.APPLE_API_PRIVATE_KEY }}
      run: |
        # Create secrets file for client
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        # Setup iOS certificates and provisioning profiles
        if [ ! -z "$IOS_CERTIFICATE_P12" ]; then
          echo "$IOS_CERTIFICATE_P12" | base64 --decode > .secrets/certificate.p12
        fi
        
        if [ ! -z "$IOS_PROVISIONING_PROFILE" ]; then
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > .secrets/profile.mobileprovision
        fi
        
        # Setup Apple API key
        if [ ! -z "$APPLE_API_PRIVATE_KEY" ]; then
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APPLE_API_PRIVATE_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APPLE_API_KEY_ID.p8
        fi
        
    - name: Install iOS certificate
      env:
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      run: |
        if [ -f ".secrets/certificate.p12" ]; then
          # Create keychain
          security create-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          # Import certificate
          security import .secrets/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          echo "✅ iOS certificate installed"
        else
          echo "⚠️ No iOS certificate found"
        fi
        
    - name: Install provisioning profile
      run: |
        if [ -f ".secrets/profile.mobileprovision" ]; then
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp .secrets/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "✅ Provisioning profile installed"
        else
          echo "⚠️ No provisioning profile found"
        fi
        
    - name: Check environment file
      run: |
        if [ ! -f "env/.env.${{ inputs.client }}" ]; then
          echo "❌ Environment file not found: env/.env.${{ inputs.client }}"
          echo "Available clients:"
          ls env/.env.* | sed 's/env\/.env./  - /' | grep -v template
          exit 1
        fi
        echo "✅ Environment file found"
        
    - name: Build iOS app
      env:
        ENVIRONMENT: ${{ inputs.client }}
      run: |
        # Set build options
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        # Run build script for iOS only
        BUILD_IOS=true BUILD_ANDROID=false ./build-client-v2.sh ${{ inputs.client }} $BUILD_OPTIONS
        
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ inputs.client }}
        path: |
          ios/App/App.xcarchive
          ios/App/build/
        retention-days: 30
        
    - name: Upload to TestFlight
      if: ${{ inputs.upload_to_testflight }}
      env:
        APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
        APPLE_API_ISSUER_ID: ${{ secrets.APPLE_API_ISSUER_ID }}
      run: |
        if [ ! -z "$APPLE_API_KEY_ID" ] && [ ! -z "$APPLE_API_ISSUER_ID" ]; then
          # Archive and export IPA
          cd ios/App
          
          # Archive
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath App.xcarchive \
            archive
            
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath App.xcarchive \
            -exportPath build \
            -exportOptionsPlist ../../scripts/ExportOptions.plist
            
          # Upload to TestFlight
          xcrun altool --upload-app \
            --type ios \
            --file build/*.ipa \
            --apiKey $APPLE_API_KEY_ID \
            --apiIssuer $APPLE_API_ISSUER_ID
            
          echo "✅ Uploaded to TestFlight"
        else
          echo "⚠️ Apple API credentials not configured"
        fi
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        security delete-keychain build.keychain 2>/dev/null || true
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision