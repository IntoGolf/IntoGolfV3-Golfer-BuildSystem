name: Build Android App

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., goese)'
        required: true
        type: string
      increment_build:
        description: 'Increment build number'
        required: false
        default: true
        type: boolean
      upload_to_play_console:
        description: 'Upload to Google Play Console'
        required: false
        default: false
        type: boolean

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 35
        build-tools: 35.0.0
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @quasar/cli
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      run: |
        # Create secrets file for client
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        # Handle Firebase/Google Services based on push notification setting
        if grep -q "VUE_APP_ENABLE_PUSH_NOTIFICATIONS=true" env/.env.${{ inputs.client }}; then
          echo "üì± Push notifications enabled for ${{ inputs.client }} - setting up Firebase..."
          if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
            echo "$GOOGLE_SERVICES_JSON" | base64 --decode > res/${{ inputs.client }}/google-services.json
            echo "‚úÖ Google Services JSON configured for ${{ inputs.client }}"
          fi
        else
          echo "üö´ Push notifications DISABLED for ${{ inputs.client }} - NUCLEAR REMOVAL OF ALL PUSH COMPONENTS..."
          
          # STEP 1: Remove Firebase files
          rm -f res/${{ inputs.client }}/google-services.json
          
          # STEP 2: Remove Firebase from Android build files
          if [ -d "android" ]; then
            echo "   - Pre-removing Firebase from Android project..."
            
            # Remove Google Services plugin from main build.gradle
            if [ -f "android/build.gradle" ]; then
              sed -i '/com\.google\.gms:google-services/d' android/build.gradle
              echo "   - Removed Google Services plugin from build.gradle"
            fi
            
            # Disable Firebase plugin in app build.gradle  
            if [ -f "android/app/build.gradle" ]; then
              sed -i '/def servicesJSON = file/,/^}/c\
// Firebase/Google Services DISABLED for this client\
logger.info("üö´ Firebase/Google Services intentionally disabled - no push notifications")' android/app/build.gradle
              echo "   - Disabled Firebase plugin in app/build.gradle"
            fi
            
            # Remove any existing google-services.json in android folder
            rm -f android/app/google-services.json
            echo "   - Removed any existing google-services.json"
          fi
          
          # STEP 3: REMOVE CAPACITOR PUSH NOTIFICATIONS PLUGIN FROM PACKAGE.JSON
          echo "   - Removing @capacitor/push-notifications from package.json..."
          if [ -f "package.json" ]; then
            # Create backup
            cp package.json package.json.backup
            
            # Remove push-notifications, capgo, firebase, and pusher dependencies using sed
            sed -i '/"@capacitor\/push-notifications":/d' package.json
            sed -i '/"@capgo\/capacitor-updater":/d' package.json
            sed -i '/"firebase":/d' package.json
            sed -i '/"pusher-js":/d' package.json
            echo "   - Removed @capacitor/push-notifications dependency"
            echo "   - Removed @capgo/capacitor-updater dependency"
            echo "   - Removed firebase dependency"
            echo "   - Removed pusher-js dependency"
            
            # Also remove from iOS Podfile
            if [ -f "ios/App/Podfile" ]; then
              cp ios/App/Podfile ios/App/Podfile.backup
              sed -i '/CapacitorPushNotifications/d' ios/App/Podfile
              sed -i '/CapgoCapacitorUpdater/d' ios/App/Podfile
              echo "   - Removed CapacitorPushNotifications from iOS Podfile"
              echo "   - Removed CapgoCapacitorUpdater from iOS Podfile"
            fi
          fi
          
          # STEP 4: Clean npm cache and reinstall without push notifications
          echo "   - Reinstalling dependencies without push notifications..."
          rm -rf node_modules package-lock.json
          npm install
          
          # STEP 5: FORCE COMPLETE REBUILD - REMOVE ALL COMPILED ASSETS
          echo "   - FORCE COMPLETE REBUILD - removing ALL compiled assets..."
          rm -rf dist/
          rm -rf src-capacitor/
          rm -rf android/app/src/main/assets/
          rm -rf android/app/build/
          rm -rf ios/App/App/public/
          
          # STEP 6: ULTRA NUCLEAR - TEMPORARILY REMOVE PUSH NOTIFICATION SOURCE FILES
          echo "   - ULTRA NUCLEAR - temporarily removing PushNotificationService and updater source files..."
          if [ -f "src/services/PushNotificationService.js" ]; then
            mv src/services/PushNotificationService.js src/services/PushNotificationService.js.disabled
            echo "   - PushNotificationService.js temporarily disabled"
          fi
          
          if [ -f "src/boot/updater.js" ]; then
            mv src/boot/updater.js src/boot/updater.js.disabled
            echo "   - updater.js temporarily disabled"
          fi
          
          echo "   - ALL compiled assets removed - forcing fresh build..."
          
          echo "‚úÖ NUCLEAR OPTION COMPLETE - ALL push notification components removed for ${{ inputs.client }}"
        fi
        
        # Setup Google Play service account
        if [ ! -z "$GOOGLE_PLAY_SERVICE_ACCOUNT" ]; then
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" | base64 --decode > .secrets/google-play-service-account.json
          echo "‚úÖ Google Play service account configured"
        fi
        
    - name: Check environment file
      run: |
        if [ ! -f "env/.env.${{ inputs.client }}" ]; then
          echo "‚ùå Environment file not found: env/.env.${{ inputs.client }}"
          echo "Available clients:"
          ls env/.env.* | sed 's/env\/.env./  - /' | grep -v template
          exit 1
        fi
        echo "‚úÖ Environment file found"
        
    - name: Build Android app
      env:
        ENVIRONMENT: ${{ inputs.client }}
      run: |
        # Set build options
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        # Check if push notifications are disabled and clean Capacitor build files
        if grep -q "VUE_APP_ENABLE_PUSH_NOTIFICATIONS=false" env/.env.${{ inputs.client }}; then
          echo "üßπ Post-build cleanup: Removing push-notifications from Capacitor Android build files..."
          
          # Remove from capacitor.settings.gradle (auto-generated file)
          if [ -f "android/capacitor.settings.gradle" ]; then
            sed -i '/capacitor-push-notifications/d' android/capacitor.settings.gradle
            sed -i '/capgo-capacitor-updater/d' android/capacitor.settings.gradle
            echo "   - Removed push-notifications from capacitor.settings.gradle"
            echo "   - Removed capgo-capacitor-updater from capacitor.settings.gradle"
          fi
          
          # Remove from capacitor.build.gradle (auto-generated file)  
          if [ -f "android/app/capacitor.build.gradle" ]; then
            sed -i '/capacitor-push-notifications/d' android/app/capacitor.build.gradle
            sed -i '/capgo-capacitor-updater/d' android/app/capacitor.build.gradle
            echo "   - Removed push-notifications from capacitor.build.gradle"
            echo "   - Removed capgo-capacitor-updater from capacitor.build.gradle"
          fi
          
          echo "‚úÖ Capacitor build files cleaned of push notification references"
        fi
        
        # Run build script for Android only
        BUILD_ANDROID=true BUILD_IOS=false ./build-client-v2.sh ${{ inputs.client }} $BUILD_OPTIONS
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build-${{ inputs.client }}
        path: |
          res/${{ inputs.client }}/${{ inputs.client }}-release.apk
          res/${{ inputs.client }}/${{ inputs.client }}-release.aab
          android/app/build/outputs/
        retention-days: 30
        
    - name: Upload to Google Play Console
      if: ${{ inputs.upload_to_play_console }}
      run: |
        if [ -f ".secrets/google-play-service-account.json" ] && [ -f "res/${{ inputs.client }}/${{ inputs.client }}-release.aab" ]; then
          echo "üì§ Uploading to Google Play Console..."
          
          # Setup Ruby and Fastlane
          sudo apt-get update
          sudo apt-get install -y ruby-full build-essential
          sudo gem install fastlane
          
          # Get package name from environment
          source env/.env.${{ inputs.client }}
          
          # Create minimal Fastfile for upload
          mkdir -p fastlane
          cat > fastlane/Fastfile << 'EOF'
          default_platform(:android)
          platform :android do
            desc "Upload to Internal Testing"
            lane :internal do
              upload_to_play_store(
                package_name: ENV['PACKAGE_NAME'],
                aab: ENV['AAB_PATH'],
                json_key: ENV['SERVICE_ACCOUNT_JSON'],
                track: 'internal',
                release_status: 'completed',
                skip_upload_apk: true,
                skip_upload_metadata: true,
                skip_upload_images: true,
                skip_upload_screenshots: true
              )
            end
          end
          EOF
          
          # Upload to Internal Testing track
          PACKAGE_NAME="$APP_ID" \
          AAB_PATH="res/${{ inputs.client }}/${{ inputs.client }}-release.aab" \
          SERVICE_ACCOUNT_JSON=".secrets/google-play-service-account.json" \
          fastlane android internal
          
          echo "‚úÖ Successfully uploaded to Google Play Console (Internal Testing)"
          echo "üîó Check at: https://play.google.com/console"
          
        else
          echo "‚ö†Ô∏è Google Play service account not configured or AAB not found"
          echo "üìã Required files:"
          echo "   - .secrets/google-play-service-account.json"
          echo "   - res/${{ inputs.client }}/${{ inputs.client }}-release.aab"
          
          if [ ! -f ".secrets/google-play-service-account.json" ]; then
            echo "‚ùå Missing: Google Play service account JSON"
            echo "   Add GOOGLE_PLAY_SERVICE_ACCOUNT secret to repository"
          fi
          
          if [ ! -f "res/${{ inputs.client }}/${{ inputs.client }}-release.aab" ]; then
            echo "‚ùå Missing: AAB file"
            echo "   Build may have failed"
          fi
        fi
        
    - name: Create release notes
      run: |
        # Get environment variables
        source env/.env.${{ inputs.client }}
        
        cat > release-notes.md << EOF
        # Android Build - ${{ inputs.client }}
        
        ## Build Information
        - **Version:** ${APP_VERSION}
        - **Build Number:** ${APP_BUILD_NUMBER}
        - **Client:** ${{ inputs.client }}
        - **Build Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **Android Target SDK:** ${ANDROID_TARGET_SDK}
        
        ## Files Generated
        - APK: \`res/${{ inputs.client }}/${{ inputs.client }}-release.apk\`
        - AAB: \`res/${{ inputs.client }}/${{ inputs.client }}-release.aab\`
        
        ## Installation
        \`\`\`bash
        # Install APK on device/emulator
        adb install res/${{ inputs.client }}/${{ inputs.client }}-release.apk
        \`\`\`
        
        ## Next Steps
        1. Download artifacts from GitHub Actions
        2. Test APK on devices/emulators
        3. Upload AAB to Google Play Console for release
        EOF
        
        echo "üìã Release notes created"
        cat release-notes.md
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ inputs.client }}
        path: release-notes.md
        retention-days: 30
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        rm -rf res/${{ inputs.client }}/google-services.json 2>/dev/null || true