name: Upload to Google Play Store

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name'
        required: true
        type: choice
        options:
          - delfland
          - noordwijkse  
          - goese
          - maasduinen
          - winterswijk
          - sallandsche
          - scherpenberg
          - amelisweerd
          - hildenberg
          - demo
      track:
        description: 'Play Store track'
        required: true
        type: choice
        options:
          - internal
          - alpha
          - beta
          - production
        default: internal
      release_status:
        description: 'Release status'
        required: true
        type: choice
        options:
          - draft
          - inProgress
          - halted
          - completed
        default: draft
      rollout_percentage:
        description: 'Rollout percentage (only for staged rollouts)'
        required: false
        type: string
        default: '100'

jobs:
  upload-to-playstore:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 35
        build-tools: 35.0.0
        
    - name: Setup Ruby for Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @quasar/cli
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      run: |
        # Create secrets file for client
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        # Setup Google Services JSON only for clients with push notifications enabled
        if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
          if grep -q "VUE_APP_ENABLE_PUSH_NOTIFICATIONS=true" env/.env.${{ inputs.client }}; then
            echo "$GOOGLE_SERVICES_JSON" | base64 --decode > res/${{ inputs.client }}/google-services.json
            echo "✅ Google Services JSON configured for ${{ inputs.client }} (push notifications enabled)"
          else
            echo "⚠️ Skipping Google Services JSON for ${{ inputs.client }} (push notifications disabled)"
            rm -f res/${{ inputs.client }}/google-services.json
          fi
        fi
        
        # Setup Google Play service account (required for upload)
        if [ ! -z "$GOOGLE_PLAY_SERVICE_ACCOUNT" ]; then
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" | base64 --decode > .secrets/google-play-service-account.json
          echo "✅ Google Play service account configured"
        else
          echo "❌ Google Play service account not found - cannot upload to Play Store"
          exit 1
        fi
        
    - name: Validate environment file
      run: |
        if [ ! -f "env/.env.${{ inputs.client }}" ]; then
          echo "❌ Environment file not found: env/.env.${{ inputs.client }}"
          exit 1
        fi
        echo "✅ Environment file found for ${{ inputs.client }}"
        
    - name: Build Android AAB
      env:
        ENVIRONMENT: ${{ inputs.client }}
      run: |
        # Build only AAB for Play Store upload
        BUILD_ANDROID=true BUILD_IOS=false ./build-client-v2.sh ${{ inputs.client }}
        
        # Verify AAB was created
        if [ ! -f "res/${{ inputs.client }}/${{ inputs.client }}-release.aab" ]; then
          echo "❌ AAB file not found: res/${{ inputs.client }}/${{ inputs.client }}-release.aab"
          exit 1
        fi
        
        echo "✅ AAB file created: res/${{ inputs.client }}/${{ inputs.client }}-release.aab"
        
    - name: Setup Fastlane
      run: |
        # Create Fastlane directory
        mkdir -p fastlane
        
        # Create Fastfile
        cat > fastlane/Fastfile << 'EOF'
        default_platform(:android)
        
        platform :android do
          desc "Upload AAB to Google Play Console"
          lane :upload_to_play_store do |options|
            upload_to_play_store(
              package_name: options[:package_name],
              aab: options[:aab_path],
              json_key: options[:service_account_json],
              track: options[:track],
              release_status: options[:release_status],
              rollout: options[:rollout_percentage],
              skip_upload_apk: true,
              skip_upload_metadata: true,
              skip_upload_images: true,
              skip_upload_screenshots: true
            )
          end
          
          desc "Upload AAB to Internal Testing"
          lane :internal do |options|
            upload_to_play_store(
              package_name: options[:package_name],
              aab: options[:aab_path],
              json_key: options[:service_account_json],
              track: 'internal',
              release_status: 'completed'
            )
          end
          
          desc "Upload AAB to Beta Testing"
          lane :beta do |options|
            upload_to_play_store(
              package_name: options[:package_name],
              aab: options[:aab_path],
              json_key: options[:service_account_json],
              track: 'beta',
              release_status: 'completed'
            )
          end
        end
        EOF
        
        # Create Gemfile
        cat > Gemfile << 'EOF'
        source "https://rubygems.org"
        
        gem "fastlane"
        EOF
        
        # Install Fastlane
        bundle install
        
    - name: Get app package name
      id: package-info
      run: |
        # Load environment variables to get package name
        source env/.env.${{ inputs.client }}
        echo "package_name=$APP_ID" >> $GITHUB_OUTPUT
        echo "app_name=$APP_DISPLAY_NAME" >> $GITHUB_OUTPUT
        echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
        
    - name: Upload to Google Play Store
      env:
        PACKAGE_NAME: ${{ steps.package-info.outputs.package_name }}
        AAB_PATH: res/${{ inputs.client }}/${{ inputs.client }}-release.aab
        SERVICE_ACCOUNT_JSON: .secrets/google-play-service-account.json
        TRACK: ${{ inputs.track }}
        RELEASE_STATUS: ${{ inputs.release_status }}
        ROLLOUT_PERCENTAGE: ${{ inputs.rollout_percentage }}
      run: |
        echo "📤 Uploading to Google Play Store..."
        echo "  - Package: $PACKAGE_NAME"
        echo "  - AAB: $AAB_PATH"
        echo "  - Track: $TRACK"
        echo "  - Release Status: $RELEASE_STATUS"
        echo "  - Rollout: $ROLLOUT_PERCENTAGE%"
        
        # Run Fastlane upload
        bundle exec fastlane android upload_to_play_store \
          package_name:"$PACKAGE_NAME" \
          aab_path:"$AAB_PATH" \
          service_account_json:"$SERVICE_ACCOUNT_JSON" \
          track:"$TRACK" \
          release_status:"$RELEASE_STATUS" \
          rollout_percentage:"$ROLLOUT_PERCENTAGE"
          
    - name: Upload success notification
      if: success()
      run: |
        echo "✅ Successfully uploaded to Google Play Store!"
        echo "📱 App: ${{ steps.package-info.outputs.app_name }}"
        echo "📦 Package: ${{ steps.package-info.outputs.package_name }}"
        echo "🎯 Track: ${{ inputs.track }}"
        echo "📊 Status: ${{ inputs.release_status }}"
        echo ""
        echo "🔗 Check your upload at: https://play.google.com/console"
        
    - name: Upload failure notification
      if: failure()
      run: |
        echo "❌ Failed to upload to Google Play Store"
        echo "Check the logs above for error details"
        echo ""
        echo "Common issues:"
        echo "- Service account doesn't have Play Store access"
        echo "- App not yet published in Play Console"
        echo "- Version code already exists"
        echo "- Missing required metadata"
        
    - name: Create upload summary
      if: always()
      run: |
        cat > upload-summary.md << EOF
        # Google Play Store Upload Summary
        
        ## Build Information
        - **Client:** ${{ inputs.client }}
        - **Package:** ${{ steps.package-info.outputs.package_name }}
        - **App Name:** ${{ steps.package-info.outputs.app_name }}
        - **Version:** ${{ steps.package-info.outputs.app_version }}
        - **Upload Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        
        ## Upload Configuration
        - **Track:** ${{ inputs.track }}
        - **Release Status:** ${{ inputs.release_status }}
        - **Rollout Percentage:** ${{ inputs.rollout_percentage }}%
        
        ## Status
        - **Upload Status:** ${{ job.status }}
        
        ## Next Steps
        $( [ "${{ job.status }}" = "success" ] && echo "✅ Upload successful! Check the Google Play Console to manage your release." || echo "❌ Upload failed. Check the workflow logs for details." )
        EOF
        
        echo "📋 Upload summary created"
        
    - name: Upload summary artifact
      uses: actions/upload-artifact@v4
      with:
        name: playstore-upload-summary-${{ inputs.client }}
        path: upload-summary.md
        retention-days: 30
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        rm -rf fastlane/
        find res/ -name "google-services.json" -delete 2>/dev/null || true