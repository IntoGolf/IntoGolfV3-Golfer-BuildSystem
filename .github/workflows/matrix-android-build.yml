name: Matrix Android Build (All Clients)

on:
  workflow_dispatch:
    inputs:
      clients:
        description: 'Comma-separated client names (leave empty for all clients)'
        required: false
        type: string
        default: ''
      increment_build:
        description: 'Increment build number'
        required: false
        default: true
        type: boolean
      upload_to_play_console:
        description: 'Upload to Google Play Console'
        required: false
        default: false
        type: boolean
  
  # Automatically build all clients on main branch push
  push:
    branches: [ main ]
    paths: 
      - 'src/**'
      - 'env/**'
      - 'package.json'
      - 'build-client-v2.sh'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      clients: ${{ steps.set-clients.outputs.clients }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Determine clients to build
      id: set-clients
      run: |
        if [ -n "${{ inputs.clients }}" ]; then
          # Use specified clients (comma-separated)
          CLIENTS='["${{ inputs.clients }}"]'
          CLIENTS=$(echo $CLIENTS | sed 's/,/","/g' | sed 's/\["/["/' | sed 's/"\]/"]/')
        else
          # Get all available clients from env directory
          CLIENTS=$(ls env/.env.* | sed 's/env\/.env\.//' | jq -R -s -c 'split("\n")[:-1]')
        fi
        
        echo "clients=$CLIENTS" >> $GITHUB_OUTPUT
        echo "Building clients: $CLIENTS"

  build-android:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        client: ${{ fromJson(needs.prepare.outputs.clients) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 35
        build-tools: 35.0.0
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @quasar/cli
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      run: |
        # Create secrets file for client
        cat > .secrets/${{ matrix.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        # Setup Google Services JSON
        if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > res/${{ matrix.client }}/google-services.json 2>/dev/null || echo "Google Services JSON not configured for ${{ matrix.client }}"
          if [ -f "res/${{ matrix.client }}/google-services.json" ]; then
            echo "✅ Google Services JSON configured for ${{ matrix.client }}"
          fi
        fi
        
        # Setup Google Play service account
        if [ ! -z "$GOOGLE_PLAY_SERVICE_ACCOUNT" ]; then
          echo "$GOOGLE_PLAY_SERVICE_ACCOUNT" | base64 --decode > .secrets/google-play-service-account.json
          echo "✅ Google Play service account configured"
        fi
        
    - name: Check environment file
      run: |
        if [ ! -f "env/.env.${{ matrix.client }}" ]; then
          echo "❌ Environment file not found: env/.env.${{ matrix.client }}"
          echo "Available clients:"
          ls env/.env.* | sed 's/env\/.env./  - /' | grep -v template
          exit 1
        fi
        echo "✅ Environment file found for ${{ matrix.client }}"
        
    - name: Build Android app
      env:
        ENVIRONMENT: ${{ matrix.client }}
      run: |
        # Set build options
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        # Run build script for Android only
        BUILD_ANDROID=true BUILD_IOS=false ./build-client-v2.sh ${{ matrix.client }} $BUILD_OPTIONS
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build-${{ matrix.client }}
        path: |
          res/${{ matrix.client }}/${{ matrix.client }}-release.apk
          res/${{ matrix.client }}/${{ matrix.client }}-release.aab
          android/app/build/outputs/
        retention-days: 30
        
    - name: Upload to Google Play Console
      if: ${{ inputs.upload_to_play_console }}
      run: |
        if [ -f ".secrets/google-play-service-account.json" ] && [ -f "res/${{ matrix.client }}/${{ matrix.client }}-release.aab" ]; then
          echo "📤 Uploading ${{ matrix.client }} to Google Play Console..."
          echo "✅ AAB file ready for upload: res/${{ matrix.client }}/${{ matrix.client }}-release.aab"
          echo "ℹ️ Manual upload to Google Play Console required"
          echo "   Go to: https://play.google.com/console"
        else
          echo "⚠️ Google Play service account not configured or AAB not found for ${{ matrix.client }}"
        fi
        
    - name: Create release notes
      run: |
        # Get environment variables
        source env/.env.${{ matrix.client }}
        
        cat > release-notes-${{ matrix.client }}.md << EOF
        # Android Build - ${{ matrix.client }}
        
        ## Build Information
        - **Client:** ${{ matrix.client }}
        - **Version:** \${APP_VERSION}
        - **Build Number:** \${APP_BUILD_NUMBER}
        - **Build Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        - **Android Target SDK:** \${ANDROID_TARGET_SDK}
        
        ## Files Generated
        - APK: \`res/${{ matrix.client }}/${{ matrix.client }}-release.apk\`
        - AAB: \`res/${{ matrix.client }}/${{ matrix.client }}-release.aab\`
        
        ## Installation
        \`\`\`bash
        # Install APK on device/emulator
        adb install res/${{ matrix.client }}/${{ matrix.client }}-release.apk
        \`\`\`
        
        ## App Details
        - **Package ID:** \${APP_ID}
        - **Display Name:** \${APP_DISPLAY_NAME}
        - **Base URL:** \${VUE_APP_BASE_URL}
        EOF
        
        echo "📋 Release notes created for ${{ matrix.client }}"
        
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ matrix.client }}
        path: release-notes-${{ matrix.client }}.md
        retention-days: 30
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        find res/ -name "google-services.json" -delete 2>/dev/null || true

  summary:
    needs: [prepare, build-android]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "Built clients: ${{ needs.prepare.outputs.clients }}" >> $GITHUB_STEP_SUMMARY
        echo "Status: ${{ needs.build-android.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Go to Actions tab to download APK/AAB files" >> $GITHUB_STEP_SUMMARY
        echo "- Each client has separate artifact bundle" >> $GITHUB_STEP_SUMMARY