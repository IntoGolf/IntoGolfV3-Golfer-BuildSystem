name: Build Mobile Apps (iOS + Android)

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Client name (e.g., goese)'
        required: true
        type: string
      build_ios:
        description: 'Build iOS app'
        required: false
        default: true
        type: boolean
      build_android:
        description: 'Build Android app'
        required: false
        default: true
        type: boolean
      increment_build:
        description: 'Increment build number'
        required: false
        default: true
        type: boolean

jobs:
  build-android:
    if: ${{ inputs.build_android }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0
        
    - name: Install dependencies
      run: npm install
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > res/${{ inputs.client }}/google-services.json
        fi
        
    - name: Build Android app
      env:
        ENVIRONMENT: ${{ inputs.client }}
      run: |
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        BUILD_ANDROID=true BUILD_IOS=false ./build-client-v2.sh ${{ inputs.client }} $BUILD_OPTIONS
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-build-${{ inputs.client }}
        path: |
          res/${{ inputs.client }}/${{ inputs.client }}-release.apk
          res/${{ inputs.client }}/${{ inputs.client }}-release.aab
        retention-days: 30

  build-ios:
    if: ${{ inputs.build_ios }}
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install CocoaPods
      run: sudo gem install cocoapods
      
    - name: Install dependencies
      run: npm install
      
    - name: Create secrets directory
      run: mkdir -p .secrets
      
    - name: Setup client secrets
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        IOS_CERTIFICATE_P12: ${{ secrets.IOS_CERTIFICATE_P12 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        cat > .secrets/${{ inputs.client }}.env << EOF
        KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
        KEY_PASSWORD="${KEY_PASSWORD}"
        KEY_ALIAS="${KEY_ALIAS}"
        EOF
        
        if [ ! -z "$IOS_CERTIFICATE_P12" ]; then
          echo "$IOS_CERTIFICATE_P12" | base64 --decode > .secrets/certificate.p12
        fi
        
        if [ ! -z "$IOS_PROVISIONING_PROFILE" ]; then
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > .secrets/profile.mobileprovision
        fi
        
    - name: Install iOS certificate
      env:
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      run: |
        if [ -f ".secrets/certificate.p12" ]; then
          security create-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          
          security import .secrets/certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        fi
        
    - name: Install provisioning profile
      run: |
        if [ -f ".secrets/profile.mobileprovision" ]; then
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp .secrets/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        fi
        
    - name: Build iOS app
      env:
        ENVIRONMENT: ${{ inputs.client }}
      run: |
        BUILD_OPTIONS=""
        if [ "${{ inputs.increment_build }}" = "false" ]; then
          BUILD_OPTIONS="$BUILD_OPTIONS --no-increment"
        fi
        
        BUILD_IOS=true BUILD_ANDROID=false ./build-client-v2.sh ${{ inputs.client }} $BUILD_OPTIONS
        
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-${{ inputs.client }}
        path: |
          ios/App/App.xcarchive
          ios/App/build/
        retention-days: 30
        
    - name: Clean up secrets
      if: always()
      run: |
        rm -rf .secrets/
        security delete-keychain build.keychain 2>/dev/null || true